name: Deploy Frontend Infra

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: production
    env:
      TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      TF_STATE_LOCK_TABLE: ${{ secrets.TF_STATE_LOCK_TABLE }}
      TRAIL_AWS_OIDC_ROLE: ${{ secrets.TRAIL_AWS_OIDC_ROLE }}
      TRAIL_AWS_REGION: ${{ secrets.TRAIL_AWS_REGION }}
      FRONTEND_BUCKET_NAME: ${{ vars.FRONTEND_BUCKET_NAME }}
      FRONTEND_CLOUDFRONT_ALIAS_DOMAINS: ${{ vars.FRONTEND_CLOUDFRONT_ALIAS_DOMAINS }}
      FRONTEND_CERTIFICATE_DOMAIN_NAME: ${{ vars.FRONTEND_CERTIFICATE_DOMAIN_NAME }}
      FRONTEND_CERTIFICATE_SANS: ${{ vars.FRONTEND_CERTIFICATE_SANS }}
      FRONTEND_HOSTED_ZONE_ID: ${{ vars.FRONTEND_HOSTED_ZONE_ID }}
    defaults:
      run:
        working-directory: infra/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required environment variables
        run: |
          missing=0
          for var in TF_STATE_BUCKET TF_STATE_LOCK_TABLE TRAIL_AWS_OIDC_ROLE TRAIL_AWS_REGION FRONTEND_BUCKET_NAME FRONTEND_CLOUDFRONT_ALIAS_DOMAINS FRONTEND_CERTIFICATE_DOMAIN_NAME FRONTEND_CERTIFICATE_SANS FRONTEND_HOSTED_ZONE_ID; do
            if [ -z "${!var}" ]; then
              echo "Missing required environment variable: $var"
              missing=1
            fi
          done
          if [ "$missing" -eq 1 ]; then
            echo "One or more required environment variables are missing. Exiting."
            exit 1
          fi
        shell: bash

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.0

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.TRAIL_AWS_OIDC_ROLE }}
          aws-region: ${{ env.TRAIL_AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=frontend/terraform.tfstate" \
            -backend-config="region=${{ env.TRAIL_AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: terraform plan
        env:
          TF_VAR_bucket_name: ${{ env.FRONTEND_BUCKET_NAME }}
          TF_VAR_cloudfront_alias_domains: ${{ env.FRONTEND_CLOUDFRONT_ALIAS_DOMAINS }}
          TF_VAR_certificate_domain_name: ${{ env.FRONTEND_CERTIFICATE_DOMAIN_NAME }}
          TF_VAR_certificate_sans: ${{ env.FRONTEND_CERTIFICATE_SANS }}
          TF_VAR_hosted_zone_id: ${{ env.FRONTEND_HOSTED_ZONE_ID }}
          TF_VAR_aws_region: ${{ env.TRAIL_AWS_REGION }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_bucket_name: ${{ env.FRONTEND_BUCKET_NAME }}
          TF_VAR_cloudfront_alias_domains: ${{ env.FRONTEND_CLOUDFRONT_ALIAS_DOMAINS }}
          TF_VAR_certificate_domain_name: ${{ env.FRONTEND_CERTIFICATE_DOMAIN_NAME }}
          TF_VAR_certificate_sans: ${{ env.FRONTEND_CERTIFICATE_SANS }}
          TF_VAR_hosted_zone_id: ${{ env.FRONTEND_HOSTED_ZONE_ID }}
          TF_VAR_aws_region: ${{ env.TRAIL_AWS_REGION }}
